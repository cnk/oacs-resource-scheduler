I was able to generate PDFs using: 

* xsltproc --version
    Using libxml 20511, libxslt 10033 and libexslt 722
    xsltproc was compiled against libxml 20511, libxslt 10033 and libexslt 722
    libxslt 10033 was compiled against libxml 20511
    libexslt 722 was compiled against libxml 20511
* FOP version 0.20.5
* Jimi 1.0 from Sun
* docbook/xsl-stylesheets-1.62.0/

All this except Jimi was installed unchanged via emerge on gentoo.

It works on OS X 10.3 as well but you have to change the fink build file 
to add jimi when building FOP (and it's only on 10.3 unstable I think).



I did have to change the fop executable script to increase the JVM
memory.  On the last line of /usr/bin/fop (or whereever yours ends
up) add -Xms64m -Xmx256m; smaller might work too...

104c104
< $JAVACMD -classpath "$LOCALCLASSPATH" $FOP_OPTS org.apache.fop.apps.Fop "$@"
---
> $JAVACMD -Xms64m -Xmx256m -classpath "$LOCALCLASSPATH" $FOP_OPTS org.apache.fop.apps.Fop "$@"



FOP generates a number of non-intuitive errors for docbook problems...

* If you <blockquote><table>...</table></blockquote> it can end up in an
  infinite loop trying to place the table.

* If you have a listitem w/o a <para> (or some other block level
  element) it will have a null pointer exception.

* If you try to generate a list-of-tables or figures it barfs.  (see
  <xsl:param name="generate.toc"> in fo.xsl for how to turn this off).

* Versions 1.62.4 and 1.64.0 of docbook-xsl generate .fo code that sends
  FOP into an infinite loop.  I may investigate but probably not.

All in all it's pretty unforgiving of validation errors and it's output
is not great (and it's table handling is iffy).

It does make a pdf with a TOC and page numbers though.


I would be interested in seeing the output produced by PassiveTeX and
XEP.


Jeff Davis davis@xarg.net